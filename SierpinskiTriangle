/**
 * This is a simple recursive fractal which can be rendered
 * easily by JavaFX.  This is a modified form of the Sierpinski Triangle,
 * adapted to be controlled by two buttons, which allow the user to increase or 
 * decrease the order of the Sierpinski Triangle.
 */

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.geometry.Point2D;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.Pane;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Polygon;

public class Sierpinski_Triangle extends Application{
    
    @Override
    public void start(Stage primaryStage) {
        
        SierpinskiTrianglePane trianglePane = new SierpinskiTrianglePane();
        trianglePane.setLayoutX(480);
        trianglePane.setLayoutY(600);
        TextField tfOrder = new TextField();
        tfOrder.setOnAction(e -> trianglePane.setOrder(Integer.parseInt(tfOrder.getText())));
        tfOrder.setPrefColumnCount(4);
        tfOrder.setAlignment(Pos.BOTTOM_RIGHT);
        
        /*
        Modify the contents of the hBox to contain two new buttons.
        */
        HBox hBox = new HBox(10);
        Label controlLabel = new Label("INCREASE OR DECREASE THE ORDER OF THE TRIANGLE");
        Button posButton = new Button("+");
        Button negButton = new Button("-");
        negButton.setDisable(true);
        
        /*
        Create listeners increase or decrease the order when clicked upon
        */
        posButton.setOnAction(e -> {
            trianglePane.incOrder();
            if (trianglePane.getOrder() == 0) negButton.setDisable(true);
            else negButton.setDisable(false);
                    
                });
        negButton.setOnAction(e -> {
            trianglePane.decOrder();
            if (trianglePane.getOrder() == 0) negButton.setDisable(true);
            else negButton.setDisable(false);
                });
        
        //hBox.getChildren().addAll(new Label("Enter an Order: "), tfOrder);
        hBox.getChildren().addAll(controlLabel, negButton, posButton);
        hBox.setAlignment(Pos.CENTER);
        
        BorderPane borderPane = new BorderPane();
        borderPane.setCenter(trianglePane);
        borderPane.setBottom(hBox);
        
        Scene scene = new Scene(borderPane, 600, 610);
        primaryStage.setTitle("Serpinski Triangle");
        primaryStage.setScene(scene);
        primaryStage.show();
        
        scene.widthProperty().addListener(ov -> trianglePane.paint());
        scene.heightProperty().addListener(ov -> trianglePane.paint());
    }
    
    public static void main(String[] args) {
        Application.launch(args);
    }
    
}

class SierpinskiTrianglePane extends Pane {
        
        private int order = 0;
        
        public void setOrder(int order) {
            this.order = order;
            paint();
        }
        
        // Create a method which returns the value of the int order.
        public int getOrder() {
            return this.order;
        }
        
        /*
        Create two new public methods which can increase or decrease the value 
        of int order by 1 when called.
        */
        
        public void incOrder() {
            order += 1;
            setOrder(order);
        }
        
        public void decOrder() {
            
            if (order >= 1) {
            order -= 1;
            setOrder(order);
            }
        }
        
        SierpinskiTrianglePane() {
            
        }
        
        protected void paint() {
            
            Point2D p1 = new Point2D(getWidth()/2, 10);
            Point2D p2 = new Point2D(10, getHeight() - 10);
            Point2D p3 = new Point2D(getWidth() - 10, getHeight() - 10);
            
            this.getChildren().clear();
            displayTriangles(order, p1, p2, p3);
            
        }
        
        private void displayTriangles(int order, Point2D p1, Point2D p2, Point2D p3) {
            
            if (order == 0) {
                
                Polygon triangle = new Polygon();
                triangle.getPoints().addAll(p1.getX(), p1.getY(), p2.getX(), p2.getY(), p3.getX(), p3.getY());
                triangle.setStroke(Color.BLACK);
                triangle.setFill(Color.GOLD);
                
                this.getChildren().add(triangle);
                
            }
            
            else {
                
                Point2D p12 = p1.midpoint(p2);
                Point2D p23 = p2.midpoint(p3);
                Point2D p31 = p3.midpoint(p1);
                
                displayTriangles(order - 1, p1, p12, p31);
                displayTriangles(order - 1, p12, p2, p23);
                displayTriangles(order - 1, p31, p23, p3);
                
            }
            
        }
        
    }

